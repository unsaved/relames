buildscript {
    // This 'buildscript' only here because with current version of Gradle,
    // 'buildscript' is only honored from the top-level build file executed.
    // When we "apply" 'build.gradle, the 'buildscript' there will be ignored.
    repositories { mavenCentral() }
    dependencies {
        classpath 'com.admc:gradle-javaPropFile-plugin:latest.milestone'
        classpath 'com.admc:gradle-ivyxml-plugin:latest.milestone'
    }
}

apply plugin: 'maven'
apply plugin: 'signing'
apply from: 'build.gradle'
defaultTasks 'uploadArchives'

signing {
    sign configurations.archives
}

artifacts {
     archives sourcesJar
     archives javadocJar
}

configurations { deployJars }

if (project.hasProperty('mavenRepository.dest.url')) {
    def url = project.property('mavenRepository.dest.url')
    assert url != null:
        '''Property 'mavenRepository.dest.url' may not be null
'''
    assert url instanceof URL:
        ('''Property 'mavenRepository.dest.url' must be of type URL.  Is a '''
                + url.class.name + '\n')
    if (url.protocol == 'scp') {
        repositories { mavenCentral() }
        dependencies {
            deployJars 'org.apache.maven.wagon:wagon-ssh:latest.milestone'
        }
    }
}

uploadArchives {
    def authMap = [:]
    if (project.hasProperty('mavenRepository.dest.username'))
        authMap['userName'] = project.property('mavenRepository.dest.username')
    if (project.hasProperty('mavenRepository.dest.password'))
        authMap['password'] = project.property('mavenRepository.dest.password')
    if (project.hasProperty('mavenRepository.dest.privateKey'))
        authMap['privateKey'] =
                project.property('mavenRepository.dest.privateKey')

    repositories.mavenDeployer {
        configuration = configurations.deployJars
        beforeDeployment { MavenDeployment deployment -> signPom(deployment) }
        if (project.hasProperty('mavenRepository.dest.url'))
            repository(url: project.property('mavenRepository.dest.url')) {
                authentication(authMap)
            }
        pom.project {
            // The hasProperty tests are necessary even for required variables
            // because this code is evaluated even if the uploadArchives task
            // will never be executed.
            if (project.hasProperty('title')) name project.property('title')
            if (project.hasProperty('description'))
                description project.property('description')
            if (project.hasProperty('url')) url project.property('url')
            if (project.hasProperty('inceptionYear'))
                inceptionYear project.property('inceptionYear')
            scm {
                if (project.hasProperty('scm.url'))
                    url project.property('scm.url')
                if (project.hasProperty('scm.connection'))
                    connection project.property('scm.connection')
                if (project.hasProperty('scm.tag'))
                    tag project.property('scm.tag')
            }
            if (project.hasProperty('org.name')
                    || project.hasProperty('org.url')) organization {
                if (project.hasProperty('org.name'))
                    name project.property('org.name')
                if (project.hasProperty('org.url'))
                    url project.property('org.url')
            }
            licenses {
                license {
                    name 'Sun open source'
                    url 'https://github.com/unsaved/relames/raw/master/doc/copyright.txt'
                    distribution 'repo'
                }
            }
            if (project.hasProperty('developer.name')
                    || project.hasProperty('developer.email')) developers {
                developer {
                    if (project.hasProperty('developer.id'))
                        id project.property('developer.id')
                    if (project.hasProperty('developer.name'))
                        name project.property('developer.name')
                    if (project.hasProperty('developer.email'))
                        email project.property('developer.email')
                }
            }
        }
    }
}

uploadArchives { doFirst {
    ['title', 'group', 'mavenRepository.dest.url', 'scm.connection',
            'scm.url', 'url', 'inceptionYear', 'description'].each {
        assert (project.hasProperty(it) && project.property(it) != null
                && project.property(it) != '') :
            """Property '$it' is required by 'uploadArchives' task.
"""
    }
    ['mavenRepository.dest.url', 'scm.url', 'url', 'org.url'].each {
        assert project.property(it) != null:
            """Property '$it' may not be null
"""
        assert (!project.hasProperty(it)
                || project.property(it) instanceof URL):
            ("""Property '$it' must be of type URL.  Is a """
                    + project.property(it).class.name + '\n')
    }
} }
